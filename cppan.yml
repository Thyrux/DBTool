local_settings:
    use_shared_libs: false
    #use_cache: false # turn on with MT
    build:
        cxx_flags_release: /MT
        #system_version: 8.1

projects:
    db_tool:
        executable_type: win32
        rc_enabled: false
        c++: 17

        options:
            any:
                link_options:
                    private:
                        - ${BDIR}/res.res
                definitions:
                    private:
                        - USE_QT

        files:
            - src/.*
            - res/.*

        exclude_from_build:
            - res/res.rc

        dependencies:
            - pvt.lzwdgc.polygon4.data_manager.data_manager: master
            - pvt.egorpugin.primitives.http: master
            - pvt.egorpugin.primitives.executor: master

            - pvt.cppan.demo.qtproject.qt.base.widgets: 5
            - name: pvt.cppan.demo.qtproject.qt.base.core
              ref: CORE
              version: 5
            - name: pvt.cppan.demo.qtproject.qt.base.tools.moc
              ref: MOC_COMMAND
              version: 5
            - name: pvt.cppan.demo.qtproject.qt.base.tools.rcc
              ref: RCC_COMMAND
              version: 5
            - pvt.cppan.demo.qtproject.qt.base.winmain: 5
            - pvt.cppan.demo.qtproject.qt.base.plugins.platforms.windows: 5
            - pvt.cppan.demo.qtproject.qt.base.plugins.styles.windowsvista: 5
            - pvt.cppan.demo.boost.algorithm: 1

            - name: pvt.cppan.demo.qtproject.qt.tools.linguist.release
              ref: Qt5_LRELEASE_EXECUTABLE
              version: 5

            - name: pvt.cppan.demo.qtproject.qt.tools.linguist.update
              ref: Qt5_LUPDATE_EXECUTABLE
              version: 5


        post_sources: |
            include(${CORE_SDIR}/src/corelib/Qt5CoreMacros.cmake)
            include(${Qt5_LRELEASE_EXECUTABLE_SDIR}/src/linguist/Qt5LinguistToolsMacros.cmake)

            set(moc ${src})
            list(FILTER moc INCLUDE REGEX ".h$")
            find_moc_targets(moc ${moc})

            set(Qt5Core_MOC_EXECUTABLE ${MOC_COMMAND})
            qt5_wrap_cpp(moc ${moc} TARGET ${this})
            set(src ${src} ${moc})

            add_custom_target(version ALL
                COMMAND git rev-list HEAD --count > ${BDIR}/version_gen.h
                COMMAND ${CMAKE_COMMAND} -E copy_if_different ${BDIR}/version_gen.h ${BDIR}/version.h.in
                WORKING_DIRECTORY ${SDIR}
            )
            set_source_files_properties(${BDIR}/version.h.in PROPERTIES GENERATED TRUE)

            set(Qt5Core_RCC_EXECUTABLE ${RCC_COMMAND})
            qt5_add_resources(rcc ${SDIR}/res/rc.qrc)
            set(src ${src} ${rcc})

            SET(translations_src_original ${SDIR}/res/qm.qrc)
            SET(translations_src ${BDIR}/res/qm.qrc)

            ADD_CUSTOM_COMMAND(
                OUTPUT ${translations_src}
                COMMAND ${CMAKE_COMMAND} -E copy ${translations_src_original} ${translations_src}
                MAIN_DEPENDENCY ${translations_src_original}
            )

            set(ts ${src})
            list(FILTER ts EXCLUDE REGEX ".*\\.txt")
            qt5_create_translation(qm_files ${ts} OPTIONS "-verbose")
            add_custom_target(translations DEPENDS ${qm_files} ${ts})

            qt5_add_resources(iexam_resources ${iexam_rc})
            qt5_add_resources(iexam_resources_qm ${translations_src})

            set(src ${src} ${iexam_resources} ${iexam_resources_qm})

            add_custom_command(OUTPUT ${BDIR}/res.res
                COMMAND ${CMAKE_RC_COMPILER} /nologo /l 0x0409 /fo${BDIR}/res.res ${SDIR}/res/res.rc
                WORKING_DIRECTORY ${BDIR}
            )
            # make a dependency for target
            set(src ${src} ${BDIR}/res.res)

        post_target: |
            add_dependencies(${this} version)
            #add_dependencies(${this} translations version)

